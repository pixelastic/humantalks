#!/usr/bin/env ruby
require_relative '../lib/script_helper'

# Create a list of all talks from the event list
class GetTalks
  include ScriptHelper

  def initialize
    @group_name = 'HumanTalks-Paris'
    @api_key = api_key('meetup')

    if @api_key.nil?
      puts 'Cannot find your API key.'
      puts 'Usage:'
      puts 'MEETUP_API_KEY=XXXXXX ./scripts/get_events'
      puts 'Or create a ./_meetup_api_key file in the root folder'
      exit 1
    end
  end

  # Mandatory cleanup of text
  def cleanup_text(text)
    text = text.gsub(/^\*/, '')
    text = text.tr(' ', ' ')
    text = text.delete('•')
    text = text.strip
    text
  end

  # Is the specified paragraph a paragraph that could hold a title?
  def looks_like_a_title(p)
    !p.css('b').empty?
  end

  def get_title(text)
    title, = text.split(' par ')
    title = title.gsub(/,$/, '')
    title
  end

  def get_authors(p)
    text = cleanup_text(p.text)
    _, raw_authors = text.split(' par ')
    return [] if raw_authors.nil?
    authors = []
    # puts p

    # Extracting content from the text
    split_authors = raw_authors.split(' et ')
    split_authors.each do |item|
      author = {
        name: item
      }
      # Trying to find the Twitter handle
      twitter_regexp = /^(.*) \(@(.*)\)(.*)/
      matches = twitter_regexp.match(item)
      if matches
        author[:name] = matches[1]
        author[:twitter] = matches[2]
      end

      authors << author
    end

    # Enriching authors from the HTML
    links = p.css('a')
    unless links.empty?
      links.each_with_index do |link, index|
        href = link.attr('href')
        # Link to a meetup profile
        authors[index][:meetup] = href.split('/')[-1] if href['www.meetup.com']
      end
    end

    authors
  end

  def custom_manual_fix(talks)
    talks.map do |talk|
      if talk[:title] =~ /^Girlz in Web/
        talk[:authors] = [
          { name: 'Duchesses FR', twitter: 'duchessfr' },
          { name: 'RailsGirlsParis', twitter: 'RailsGirlsParis' },
          { name: 'Girls In Web', twitter: 'GirlzInWeb' }
        ]
      end

      talk
    end

    talks
  end
      

  def talks
    events = read_json('data/events')
    talks = []

    events.each do |event|
      puts '============='
      desc = event['_description']
      paras = Nokogiri::HTML(desc).css('body p')

      paras.each do |p|
        talk = {}

        next unless looks_like_a_title(p)
        text = cleanup_text(p.text)

        # Splitting title, author and twitter
        title = get_title(text)
        authors = get_authors(p)

        # Skip if no author found
        next if authors.empty?

        talk[:title] = title
        talk[:authors] = authors

        talks << talk
      end
    end

    talks = custom_manual_fix(talks)
    talks
  end

  def run
    write_json('data/talks', talks)
  end

end
GetTalks.new.run
